# THIS FILE IS AUTOMATICALLY GENERATED.
# Change 1
"""
Generated blueprint DSL (.py)
"""

from calm.dsl.builtins import *  # no_qa
import json

# Secret Variables
BP_CRED_db_server_cred_KEY = read_local_file("BP_CRED_db_server_cred_KEY")
BP_CRED_era_web_cred_PASSWORD = read_local_file("BP_CRED_era_web_cred_PASSWORD")
Profile_Nutanix_variable_DB_PASSWORD = read_local_file(
    "Profile_Nutanix_variable_DB_PASSWORD"
)
Profile_Nutanix_variable_CLIENT_PUB_KEY = read_local_file(
    "Profile_Nutanix_variable_CLIENT_PUB_KEY"
)

# Credentials
BP_CRED_db_server_cred = basic_cred(
    "centos", BP_CRED_db_server_cred_KEY, name="db_server_cred", type="KEY"
)
BP_CRED_era_web_cred = basic_cred(
    "admin",
    BP_CRED_era_web_cred_PASSWORD,
    name="era_web_cred",
    type="PASSWORD",
    default=True,
)


class Postgres(Service):
    """Postgres Service description"""

    SCHEDULE_HOURS = CalmVariable.Simple(
        "1", label="", is_mandatory=False, is_hidden=False, runtime=True
    )

    SCHEDULE_MINUTES = CalmVariable.Simple(
        "0", label="", is_mandatory=False, is_hidden=False, runtime=True
    )

    SCHEDULE_SECONDS = CalmVariable.Simple(
        "0", label="", is_mandatory=False, is_hidden=False, runtime=True
    )

    SERVICE_NAME = CalmVariable.Simple(
        "postgresql-9.6", label="", is_mandatory=False, is_hidden=False, runtime=True
    )


class Apache(Service):
    """Apache Service description"""

    pass


class HAProxy(Service):
    """HAProxy Service description"""

    pass




class PostgreSQL(Substrate):
    """PostgreSQL Substrate description"""

    os_type = "Linux"
    provider_type = "EXISTING_VM"
    provider_spec = read_provider_spec("specs/PostgreSQL_provider_spec.yaml")
    readiness_probe = {
        "connection_type": "SSH",
        "connection_port": 22,
        "connection_protocol": "",
        "timeout_secs": "",
        "delay_secs": "60",
        "retries": "5",
        "address": "@@{ip_address}@@",
        "disabled": True,
    }
    readiness_probe.credential = ref(BP_CRED_db_server_cred)

    @action
    def __pre_create__():
        """__pre_create__ Action description"""

        CalmTask.SetVariable.escript(
            name="Get Token",
            filename="scripts/Substrate_PostgreSQL_Action___pre_create___Task_GetToken.py",
            target=ref(PostgreSQL),
            variables=["TOKEN"],
        )
        CalmTask.HTTP.get(
            "https://@@{ERA_IP}@@/era/v0.8/profiles?type=Database_Parameter&engine=postgres_database&name=@@{DB_PARAMS_PROFILE}@@",
            headers={"Authorization": "Bearer @@{TOKEN}@@"},
            secret_headers={},
            content_type="application/json",
            verify=False,
            status_mapping={200: True},
            response_paths={"DB_PARAMS_PROFILE_ID": "$.id"},
            name="Get DB Parameter Profile ID",
            target=ref(PostgreSQL),
        )
        CalmTask.HTTP.get(
            "https://@@{ERA_IP}@@/era/v0.8/profiles?type=Network&engine=postgres_database&name=@@{NETWORK_PROFILE}@@",
            headers={"Authorization": "Bearer @@{TOKEN}@@"},
            secret_headers={},
            content_type="application/json",
            verify=False,
            status_mapping={200: True},
            response_paths={"NETWORK_PROFILE_ID": "$.id"},
            name="Get Network Profile ID",
            target=ref(PostgreSQL),
        )
        CalmTask.HTTP.get(
            "https://@@{ERA_IP}@@/era/v0.8/profiles?type=Compute&engine=postgres_database&name=@@{COMPUTE_PROFILE}@@",
            headers={"Authorization": "Bearer @@{TOKEN}@@"},
            secret_headers={},
            content_type="application/json",
            verify=False,
            status_mapping={200: True},
            response_paths={"COMPUTE_PROFILE_ID": "$.id"},
            name="Get Compute Profile ID",
            target=ref(PostgreSQL),
        )
        CalmTask.HTTP.get(
            "https://@@{ERA_IP}@@/era/v0.8/clusters",
            headers={"Authorization": "Bearer @@{TOKEN}@@"},
            secret_headers={},
            content_type="application/json",
            verify=False,
            status_mapping={200: True},
            response_paths={"CLUSTER_ID": "$[0].id"},
            name="Get  Cluster ID",
            target=ref(PostgreSQL),
        )
        CalmTask.HTTP.get(
            "https://@@{ERA_IP}@@/era/v0.8/slas/name/@@{SLA_NAME}@@",
            headers={"Authorization": "Bearer @@{TOKEN}@@"},
            secret_headers={},
            content_type="application/json",
            verify=False,
            status_mapping={200: True},
            response_paths={"SLA_ID": "$.id"},
            name="Get SLA ID",
            target=ref(PostgreSQL),
        )
        CalmTask.HTTP.get(
            "https://@@{ERA_IP}@@/era/v0.8/profiles?type=Software&engine=postgres_database&name=@@{SOFTWARE_PROFILE}@@",
            headers={"Authorization": "Bearer @@{TOKEN}@@"},
            secret_headers={},
            content_type="application/json",
            verify=False,
            status_mapping={200: True},
            response_paths={"SOFTWARE_PROFILE_ID": "$.id"},
            name="Get Software Profile ID",
            target=ref(PostgreSQL),
        )
        CalmTask.HTTP.post(
            "https://@@{ERA_IP}@@/era/v0.8/databases/provision",
            body=json.dumps(
                {
                    "databaseType": "postgres_database",
                    "databaseName": "@@{DB_NAME}@@",
                    "clusterId": "@@{CLUSTER_ID}@@",
                    "softwareProfileId": "@@{SOFTWARE_PROFILE_ID}@@",
                    "computeProfileId": "@@{COMPUTE_PROFILE_ID}@@",
                    "networkProfileId": "@@{NETWORK_PROFILE_ID}@@",
                    "dbParameterProfileId": "@@{DB_PARAMS_PROFILE_ID}@@",
                    "newDbServerTimeZone": "Asia/Calcutta",
                    "timeMachineInfo": {
                        "name": "@@{TM_NAME}@@",
                        "description": "",
                        "slaId": "@@{SLA_ID}@@",
                        "schedule": {
                            "snapshotTimeOfDay": {
                                "hours": 1,
                                "minutes": 0,
                                "seconds": 0,
                            },
                            "continuousSchedule": {
                                "enabled": True,
                                "logBackupInterval": 30,
                                "snapshotsPerDay": 1,
                            },
                            "weeklySchedule": {"enabled": True, "dayOfWeek": "FRIDAY"},
                            "monthlySchedule": {"enabled": True, "dayOfMonth": "9"},
                            "quartelySchedule": {
                                "enabled": True,
                                "startMonth": "JANUARY",
                                "dayOfMonth": "9",
                            },
                            "yearlySchedule": {
                                "enabled": False,
                                "dayOfMonth": 31,
                                "month": "DECEMBER",
                            },
                        },
                        "tags": [],
                        "autoTuneLogDrive": True,
                    },
                    "provisionInfo": [
                        {"name": "application_type", "value": "postgres_database"},
                        {"name": "nodes", "value": "1"},
                        {"name": "proxy_write_port", "value": "5000"},
                        {"name": "listener_port", "value": "5432"},
                        {"name": "proxy_read_port", "value": "5001"},
                        {"name": "database_size", "value": "200"},
                        {"name": "working_dir", "value": "/tmp"},
                        {"name": "auto_tune_staging_drive", "value": True},
                        {"name": "dbserver_name", "value": "@@{VM_NAME}@@"},
                        {
                            "name": "ssh_public_key",
                            "value": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDMGAS/K0Mb/uwFXwD+hkjguy7VMZk2hpuhwPl9FUZwVBrURf/i9QMJ5/paPEZixu8VlRx7Inu4iun7rQfrnfeIYInmBwspXHYiTK3oHJAgZnrAHVEf1p6YaxLINlT1NI5yOAGPRWW6of8rBDBH1ObwU2+wcSx/1H0uIs3aZNLufr+Rh628ACxAum2Gt8AVRj6ua2BPFyt5VTdclyysAmeh1AiixNgOZXOz6y/i4TbzpY78I3isuKpxsUeXX6jxEMQol406jHDUF6njEOPIQG2zVZ3QJlTG9OlN+NiyZG9WkZz0VG/6M8ixxIHHI2dNwUbBFv2HUu+8X9LTLFq2O7KjX9Hp7uZKBAySHA3eKaKHIp2bZuU1bT5PRPkggngX86xg+T+OMNnutbAiMnRJ8+FvD5So+5TIx4b9GgxAxure3x2yRPT9lOiQOB+CVpJPxR0Rn9bOI+wiPnD0kAGvK/fHT+pqL4PM+hTnJtp9rrCRzIQApBx1263jEcYffhW2epZQRO+he5CMawFJ5TBe08om2AaDJ8GQdrpF6YA3W8DzHbmL3DPVVHdmqPLn10o+LX4gv5SdIIDVGdjKOc1BCnLTRmM28d5+sLDt/M+kvcQgf0y0yDjMVjGECZkt39hbm4ELMHzZtzYLmHNhBZxRqHeJ7qFTuv1kx88OW3Xc5mbBNQ== centos@nutanix.com",
                        },
                        {"name": "db_password", "value": "@@{DB_PASSWORD}@@"},
                    ],
                }
            ),
            headers={"Authorization": "Bearer @@{TOKEN}@@"},
            secret_headers={},
            content_type="application/json",
            verify=False,
            status_mapping={200: True},
            response_paths={"OPERATION_ID": "$.operationId"},
            name="Depoly Postgres DB",
            target=ref(PostgreSQL),
        )
        CalmTask.Exec.escript(
            name="Get DB Provision Status",
            filename="scripts/Substrate_PostgreSQL_Action___pre_create___Task_GetDBProvisionStatus.py",
            target=ref(PostgreSQL),
        )
        CalmTask.HTTP.get(
            "https://@@{ERA_IP}@@/era/v0.8/dbservers/name/@@{VM_NAME}@@?detailed=False&load-drive=False",
            headers={"Authorization": "Bearer @@{TOKEN}@@"},
            secret_headers={},
            content_type="application/json",
            verify=False,
            status_mapping={200: True},
            response_paths={"DB_SERVER": "$.ip"},
            name="Get DB Server IP",
            target=ref(PostgreSQL),
        )


class ApacheVM(Substrate):
    """ApacheVM Substrate description"""

    os_type = "Linux"
    provider_type = "AHV_VM"
    provider_spec = read_ahv_spec(
        "specs/ApacheVM_provider_spec.yaml", disk_packages={}
    )
    readiness_probe = {
        "connection_type": "SSH",
        "connection_port": 22,
        "connection_protocol": "",
        "timeout_secs": "",
        "delay_secs": "60",
        "retries": "5",
        "address": "@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
        "disabled": False,
    }
    readiness_probe.credential = ref(BP_CRED_db_server_cred)


class HAProxyVM(Substrate):
    """HAProxyVM Substrate description"""

    os_type = "Linux"
    provider_type = "AHV_VM"
    provider_spec = read_ahv_spec(
        "specs/HAProxyVM_provider_spec.yaml", disk_packages={}
    )
    readiness_probe = {
        "connection_type": "SSH",
        "connection_port": 22,
        "connection_protocol": "",
        "timeout_secs": "",
        "delay_secs": "60",
        "retries": "5",
        "address": "@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
        "disabled": False,
    }
    readiness_probe.credential = ref(BP_CRED_db_server_cred)


class PostgresPackage(Package):
    """PostgresPackage Package description"""

    services = [ref(Postgres)]


class ApachePackageInstall(Package):
    """ApachePackageInstall Package description"""

    services = [ref(Apache)]

    @action
    def __install__():
        """__install__ Action description"""

        CalmTask.Exec.ssh(
            name="Install Apache and App",
            filename="scripts/Package_ApachePackageInstall_Action___install___Task_InstallApacheandApp.sh",
            cred=ref(BP_CRED_db_server_cred),
            target=ref(Apache),
        )


class HAProxyPackageInstall(Package):
    """HAProxyPackageInstall Package description"""

    services = [ref(HAProxy)]

    @action
    def __install__():
        """__install__ Action description"""

        CalmTask.Exec.ssh(
            name="Install HAProxy",
            filename="scripts/Package_HAProxyPackageInstall_Action___install___Task_InstallHAProxy.sh",
            cred=ref(BP_CRED_db_server_cred),
            target=ref(HAProxy),
        )


class f6be2786_deployment(Deployment):
    """f6be2786_deployment Deployment description"""

    min_replicas = "1"
    max_replicas = "1"

    packages = [ref(PostgresPackage)]
    substrate = ref(PostgreSQL)


class f93c2be6_deployment(Deployment):
    """f93c2be6_deployment Deployment description"""

    min_replicas = "2"
    max_replicas = "5"

    packages = [ref(ApachePackageInstall)]
    substrate = ref(ApacheVM)


class b85d1fdc_deployment(Deployment):
    """b85d1fdc_deployment Deployment description"""

    min_replicas = "1"
    max_replicas = "1"

    packages = [ref(HAProxyPackageInstall)]
    substrate = ref(HAProxyVM)


class Nutanix(Profile):
    """Nutanix Profile description"""

    deployments = [f6be2786_deployment, f93c2be6_deployment, b85d1fdc_deployment]

    DB_NAME = CalmVariable.Simple(
        "pg_prod_db_@@{calm_unique}@@",
        label="DB Name:",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
    )

    DB_PASSWORD = CalmVariable.Simple.Secret(
        Profile_Nutanix_variable_DB_PASSWORD,
        label="DB Password:",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
    )

    DB_USER = CalmVariable.Simple(
        "postgres", label="DB User:", is_mandatory=False, is_hidden=False, runtime=False
    )

    ERA_IP = CalmVariable.Simple(
        "10.46.139.202",
        label="Era Server:",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
    )

    COMPUTE_PROFILE = CalmVariable.Simple(
        "SAMPLE_PG_COMPUTE",
        label="Compute Profile:",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
    )

    NETWORK_PROFILE = CalmVariable.Simple(
        "DEFAULT_OOB_POSTGRESQL_NETWORK",
        label="Network Profile:",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
    )

    DB_PARAMS_PROFILE = CalmVariable.Simple(
        "DEFAULT_POSTGRES_PARAMS",
        label="DB Params Profile:",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
    )

    CLIENT_PUB_KEY = CalmVariable.Simple.Secret(
        Profile_Nutanix_variable_CLIENT_PUB_KEY,
        label="Client Public Key:",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
    )

    CLONE_NAME = CalmVariable.Simple(
        "era_pg_db_clone",
        label="Clone Name:",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
    )

    VM_NAME = CalmVariable.Simple(
        "era_pg_db_server_@@{calm_unique}@@",
        label="DB Server:",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
    )

    PITR_TIME = CalmVariable.Simple(
        "2019-08-08 06:47:08",
        label="PITR Time:",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
    )

    SLA_NAME = CalmVariable.Simple(
        "DEFAULT_OOB_BRONZE_SLA",
        label="SLA name:",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
    )

    SOFTWARE_PROFILE = CalmVariable.Simple(
        "POSTGRES_10.4_OOB",
        label="Software Profile:",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
    )

    TM_NAME = CalmVariable.Simple(
        "era_pg_db_TM",
        label="Time Machine Name:",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
    )

    @action
    def UpdateTimeMachine(display_name="Update Time Machine"):
        """UpdateTimeMachine Action description"""

        TM_NAME = CalmVariable.Simple(
            "era_pg_db_TM", label="", is_mandatory=True, is_hidden=False, runtime=True
        )
        SLANAME = CalmVariable.Simple(
            "SLA1", label="", is_mandatory=False, is_hidden=False, runtime=True
        )
        SCHEDULE_HOURS = CalmVariable.Simple(
            "1", label="", is_mandatory=False, is_hidden=False, runtime=True
        )
        SCHEDULE_MINUTES = CalmVariable.Simple(
            "0", label="", is_mandatory=False, is_hidden=False, runtime=True
        )
        SCHEDULE_SECONDS = CalmVariable.Simple(
            "0", label="", is_mandatory=False, is_hidden=False, runtime=True
        )
        LOG_CATCHUP_INTERVAL_IN_MINUTE = CalmVariable.Simple(
            "40", label="", is_mandatory=False, is_hidden=False, runtime=True
        )
        SNAPSHOT_PER_DAY = CalmVariable.Simple(
            "1", label="", is_mandatory=False, is_hidden=False, runtime=True
        )
        DAY_OF_WEEK = CalmVariable.Simple(
            "TUESDAY", label="", is_mandatory=False, is_hidden=False, runtime=True
        )
        DAY_OF_MONTH = CalmVariable.Simple(
            "26", label="", is_mandatory=False, is_hidden=False, runtime=True
        )
        QUARTER_START_MONTH = CalmVariable.Simple(
            "FEBRUARY", label="", is_mandatory=False, is_hidden=False, runtime=True
        )
        NEW_TM_NAME = CalmVariable.Simple(
            "era_pg_db1_TM", label="", is_mandatory=False, is_hidden=False, runtime=True
        )
        with parallel():
            CalmTask.HTTP.get(
                "https://@@{ERA_IP}@@:8443/era/v0.8/tms/name/@@{TM_NAME}@@",
                headers={"Authorization": "Bearer @@{TOKEN}@@"},
                secret_headers={},
                content_type="application/json",
                verify=False,
                status_mapping={200: True},
                response_paths={"TM_ID": "$.id"},
                name="Get TM ID",
                target=ref(Postgres),
            )
            CalmTask.HTTP.get(
                "https://@@{ERA_IP}@@:8443/era/v0.8/slas/name/@@{SLANAME}@@",
                headers={"Authorization": "Bearer @@{TOKEN}@@"},
                secret_headers={},
                content_type="application/json",
                verify=False,
                status_mapping={200: True},
                response_paths={"SLA_ID": "$.id"},
                name="Get SLA ID",
                target=ref(Postgres),
            )
        CalmTask.Exec.escript(
            name="Update TM",
            filename="scripts/Profile_Nutanix_Action_UpdateTimeMachine_Task_UpdateTM.py",
            target=ref(Postgres),
        )

    @action
    def CreateSnapshot(display_name="Create Snapshot"):
        """CreateSnapshot Action description"""

        TM_NAME = CalmVariable.Simple(
            "era_pg_db_TM",
            label="",
            regex="^.*$",
            validate_regex=False,
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
        )
        SNAPSHOTNAME = CalmVariable.Simple(
            "Test_SNAP_1", label="", is_mandatory=False, is_hidden=False, runtime=True
        )
        CalmTask.HTTP.get(
            "https://@@{ERA_IP}@@:8443/era/v0.8/tms/name/@@{TM_NAME}@@",
            headers={"Authorization": "Bearer @@{TOKEN}@@"},
            secret_headers={},
            content_type="application/json",
            verify=False,
            status_mapping={200: True},
            response_paths={"TM_ID": "$.id"},
            name="Get TM ID",
            target=ref(Postgres),
        )
        CalmTask.HTTP.post(
            "https://@@{ERA_IP}@@:8443/era/v0.8/tms/@@{TM_ID}@@/snapshots",
            body=json.dumps(
                {
                    "actionHeader": [
                        {"name": "snapshotName", "value": "@@{SNAPSHOTNAME}@@"}
                    ]
                }
            ),
            headers={"Authorization": "Bearer @@{TOKEN}@@"},
            secret_headers={},
            content_type="application/json",
            verify=False,
            status_mapping={200: True},
            response_paths={},
            name="Take Snapshots ",
            target=ref(Postgres),
        )

    @action
    def DeleteSLA(display_name="Delete SLA"):
        """DeleteSLA Action description"""

        SLANAME = CalmVariable.Simple(
            "TestSLA", label="", is_mandatory=True, is_hidden=False, runtime=True
        )
        CalmTask.HTTP.get(
            "https://@@{ERA_IP}@@:8443/era/v0.8/slas/name/@@{SLANAME}@@",
            headers={"Authorization": "Bearer @@{TOKEN}@@"},
            secret_headers={},
            content_type="application/json",
            verify=False,
            status_mapping={200: True},
            response_paths={"SLA_ID": "$.id"},
            name="Get SLA ID",
            target=ref(Postgres),
        )
        CalmTask.HTTP.delete(
            "https://@@{ERA_IP}@@:8443/era/v0.8/slas/@@{SLA_ID}@@",
            body=json.dumps({}),
            headers={"Authorization": "Bearer @@{TOKEN}@@"},
            secret_headers={},
            content_type="application/json",
            verify=False,
            status_mapping={200: True},
            response_paths={},
            name="Delete SLA",
            target=ref(Postgres),
        )

    @action
    def LogCatchup(display_name="Log Catchup"):
        """LogCatchup Action description"""

        TM_NAME = CalmVariable.Simple(
            "era_pg_db_TM", label="", is_mandatory=False, is_hidden=False, runtime=True
        )
        CalmTask.HTTP.get(
            "https://@@{ERA_IP}@@:8443/era/v0.8/tms/name/@@{TM_NAME}@@",
            headers={"Authorization": "Bearer @@{TOKEN}@@"},
            secret_headers={},
            content_type="application/json",
            verify=False,
            status_mapping={200: True},
            response_paths={"TM_ID": "$.id"},
            name="Get TM ID",
            target=ref(Postgres),
        )
        CalmTask.HTTP.post(
            "https://@@{ERA_IP}@@:8443/era/v0.8/tms/@@{TM_ID}@@/log-catchups",
            body=json.dumps(
                {"actionHeader": [{"name": "switch_log", "value": "True"}]}
            ),
            headers={"Authorization": "Bearer @@{TOKEN}@@"},
            secret_headers={},
            content_type="application/json",
            verify=False,
            status_mapping={200: True},
            response_paths={"operationId": "$.id"},
            name="Do Log CatchUp",
            target=ref(Postgres),
        )

    @action
    def PauseTimeMachine(display_name="Pause Time Machine"):
        """PauseTimeMachine Action description"""

        TM_NAME = CalmVariable.Simple(
            "era_pg_db_TM", label="", is_mandatory=False, is_hidden=False, runtime=True
        )
        CalmTask.HTTP.get(
            "https://@@{ERA_IP}@@:8443/era/v0.8/tms/name/@@{TM_NAME}@@",
            headers={"Authorization": "Bearer @@{TOKEN}@@"},
            secret_headers={},
            content_type="application/json",
            verify=False,
            status_mapping={200: True},
            response_paths={"TM_ID": "$.id"},
            name="Get TM ID",
            target=ref(Postgres),
        )
        CalmTask.Exec.escript(
            name="Pause TM",
            filename="scripts/Profile_Nutanix_Action_PauseTimeMachine_Task_PauseTM.py",
            target=ref(Postgres),
        )
        CalmTask.HTTP.get(
            "https://@@{ERA_IP}@@:8443/era/v0.8/tms/@@{TM_ID}@@",
            headers={"Authorization": "Bearer @@{TOKEN}@@"},
            secret_headers={},
            content_type="application/json",
            verify=False,
            status_mapping={200: True},
            response_paths={"TM_STATUS": "$.status"},
            name="Get TM Status",
            target=ref(Postgres),
        )
        CalmTask.Exec.escript(
            name="Verify TM Status",
            filename="scripts/Profile_Nutanix_Action_PauseTimeMachine_Task_VerifyTMStatus.py",
            target=ref(Postgres),
        )

    @action
    def ResumeTimeMachine(display_name="Resume Time Machine"):
        """ResumeTimeMachine Action description"""

        TM_NAME = CalmVariable.Simple(
            "era_pg_db_TM", label="", is_mandatory=False, is_hidden=False, runtime=True
        )
        CalmTask.HTTP.get(
            "https://@@{ERA_IP}@@:8443/era/v0.8/tms/name/@@{TM_NAME}@@",
            headers={"Authorization": "Bearer @@{TOKEN}@@"},
            secret_headers={},
            content_type="application/json",
            verify=False,
            status_mapping={200: True},
            response_paths={"TM_ID": "$.id"},
            name="Get TM ID",
            target=ref(Postgres),
        )
        CalmTask.Exec.escript(
            name="Resume TM",
            filename="scripts/Profile_Nutanix_Action_ResumeTimeMachine_Task_ResumeTM.py",
            target=ref(Postgres),
        )
        CalmTask.HTTP.get(
            "https://@@{ERA_IP}@@:8443/era/v0.8/tms/@@{TM_ID}@@",
            headers={"Authorization": "Bearer @@{TOKEN}@@"},
            secret_headers={},
            content_type="application/json",
            verify=False,
            status_mapping={200: True},
            response_paths={"TM_STATUS": "$.status"},
            name="Get TM Status",
            target=ref(Postgres),
        )
        CalmTask.Exec.escript(
            name="Verify TM Status",
            filename="scripts/Profile_Nutanix_Action_ResumeTimeMachine_Task_VerifyTMStatus.py",
            target=ref(Postgres),
        )

    @action
    def UnregisterDatabase(display_name="Unregister Database"):
        """UnregisterDatabase Action description"""

        DBNAME = CalmVariable.Simple(
            "era_pg_db", label="", is_mandatory=False, is_hidden=False, runtime=True
        )
        CalmTask.HTTP.get(
            "https://@@{ERA_IP}@@:8443/era/v0.8/databases/name/@@{DBNAME}@@",
            headers={"Authorization": "Bearer @@{TOKEN}@@"},
            secret_headers={},
            content_type="application/json",
            verify=False,
            status_mapping={200: True},
            response_paths={"DB_ID": "$.id"},
            name="Get DB ID",
            target=ref(Postgres),
        )
        CalmTask.HTTP.delete(
            "https://@@{ERA_IP}@@:8443/era/v0.8/databases/@@{DB_ID}@@?storage-cleanup=True&tm-cleanup=True",
            body=json.dumps({}),
            headers={"Authorization": "Bearer @@{TOKEN}@@"},
            secret_headers={},
            content_type="application/json",
            verify=False,
            status_mapping={200: True},
            response_paths={"OPERATION_ID": "$.operationId"},
            name="Unregister DB",
            target=ref(Postgres),
        )
        CalmTask.Exec.escript(
            name="Monitor Unregister DB Operation",
            filename="scripts/Profile_Nutanix_Action_UnregisterDatabase_Task_MonitorUnregisterDBOperation.py",
            target=ref(Postgres),
        )

    @action
    def UnregisterDatabaseServer(display_name="Unregister Database  Server"):
        """UnregisterDatabaseServer Action description"""

        DB_SERVER_NAME = CalmVariable.Simple(
            "lin-0-db-server",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
        )
        CalmTask.HTTP.get(
            "https://@@{ERA_IP}@@:8443/era/v0.8/dbservers/name/@@{DB_SERVER_NAME}@@",
            headers={"Authorization": "Bearer @@{TOKEN}@@"},
            secret_headers={},
            content_type="application/json",
            verify=False,
            status_mapping={200: True},
            response_paths={"DB_SERVER_ID": "$.id"},
            name="Get DB Server ID",
            target=ref(Postgres),
        )
        CalmTask.HTTP.delete(
            "https://@@{ERA_IP}@@:8443/era/v0.8/dbservers/@@{DB_SERVER_ID}@@?remove=True",
            body=json.dumps({}),
            headers={"Authorization": "Bearer @@{TOKEN}@@"},
            secret_headers={},
            content_type="application/json",
            verify=False,
            status_mapping={200: True},
            response_paths={"OPERATION_ID": "$.operationId"},
            name="Unregister DB Server",
            target=ref(Postgres),
        )
        CalmTask.Exec.escript(
            name="Monitor Unregister DB Server Operation",
            filename="scripts/Profile_Nutanix_Action_UnregisterDatabaseServer_Task_MonitorUnregisterDBServerOperation.py",
            target=ref(Postgres),
        )

    @action
    def CreateProfile(display_name="Create Profile"):
        """CreateProfile Action description"""

        DB_SERVER_NAME = CalmVariable.Simple(
            "lin-0-190228-223012",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
        )
        DB_ENGINE = CalmVariable.Simple(
            "postgres_database",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
        )
        PROFILE_TYPE = CalmVariable.Simple(
            "Software", label="", is_mandatory=False, is_hidden=False, runtime=True
        )
        PROFILE_NAME = CalmVariable.Simple(
            "TEST_PROFILE", label="", is_mandatory=False, is_hidden=False, runtime=True
        )
        PROFILE_DESCRIPTION = CalmVariable.Simple(
            "Sample test profile",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
        )
        CalmTask.HTTP.get(
            "https://@@{ERA_IP}@@:8443/era/v0.8/dbservers/name/@@{DB_SERVER_NAME}@@",
            headers={"Authorization": "Bearer @@{TOKEN}@@"},
            secret_headers={},
            content_type="application/json",
            verify=False,
            status_mapping={200: True},
            response_paths={"SOURCE_DBSERVER_ID": "$.id"},
            name="Get DB Server ID",
            target=ref(Postgres),
        )
        CalmTask.HTTP.post(
            "https://@@{ERA_IP}@@:8443/era/v0.8/profiles",
            body=json.dumps(
                {
                    "engineType": "@@{DB_ENGINE}@@",
                    "type": "@@{PROFILE_TYPE}@@",
                    "dbVersion": "ALL",
                    "properties": [
                        {
                            "name": "SOURCE_DBSERVER_ID",
                            "value": "@@{SOURCE_DBSERVER_ID}@@",
                            "description": "ID of the database server that should be used as a reference to create the software profile",
                        }
                    ],
                    "name": "@@{PROFILE_NAME}@@",
                    "description": "@@{PROFILE_DESCRIPTION}@@",
                }
            ),
            headers={"Authorization": "Bearer @@{TOKEN}@@"},
            secret_headers={},
            content_type="application/json",
            verify=False,
            status_mapping={200: True},
            response_paths={},
            name="Create Profile",
            target=ref(Postgres),
        )

    @action
    def DeleteProfile(display_name="Delete Profile"):
        """DeleteProfile Action description"""

        PROFILE_NAME = CalmVariable.Simple(
            "PG_Profile", label="", is_mandatory=False, is_hidden=False, runtime=True
        )
        PROFILE_TYPE = CalmVariable.Simple(
            "Software", label="", is_mandatory=False, is_hidden=False, runtime=True
        )
        DB_ENGINE = CalmVariable.Simple(
            "postgres_database",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
        )
        CalmTask.HTTP.get(
            "https://10.46.35.84:8443/era/v0.8/profiles?type=@@{PROFILE_TYPE}@@&engine=@@{DB_ENGINE}@@&name=@@{PROFILE_NAME}@@",
            headers={"Authorization": "Bearer @@{TOKEN}@@"},
            secret_headers={},
            content_type="application/json",
            verify=False,
            status_mapping={200: True},
            response_paths={"PROFILE_ID": "$.id"},
            name="Get Profile ID",
            target=ref(Postgres),
        )
        CalmTask.HTTP.delete(
            "https://@@{ERA_IP}@@:8443/era/v0.8/profiles/@@{PROFILE_ID}@@",
            body=json.dumps({}),
            headers={"Authorization": "Bearer @@{TOKEN}@@"},
            secret_headers={},
            content_type="application/json",
            verify=False,
            status_mapping={200: True},
            response_paths={},
            name="Delete Profile",
            target=ref(Postgres),
        )


class DemoCalmEraSKO2019(Blueprint):
    """DemoCalmEraSKO2019 Blueprint description"""

    services = [Postgres, Apache, HAProxy]
    packages = [
        PostgresPackage,
        ApachePackageInstall,
        HAProxyPackageInstall
    ]
    substrates = [PostgreSQL, ApacheVM, HAProxyVM]
    profiles = [Nutanix]
    credentials = [BP_CRED_db_server_cred, BP_CRED_era_web_cred]
